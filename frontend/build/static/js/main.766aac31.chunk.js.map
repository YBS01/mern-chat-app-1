{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/miscellaneous/CueChangeModal.js","components/SingleSheet.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","_hover","bg","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","color","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","console","log","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","_selected","TabPanels","TabPanel","getSender","loggedUser","users","_users$","_id","getSenderFull","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","UserBadgeItem","handleFunction","admin","Badge","px","py","cursor","CloseIcon","pl","UserListItem","background","Avatar","mr","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","concat","token","put","chatId","userId","handleRemove","chatName","flexWrap","pb","map","ml","query","get","handleSearch","Spinner","CueChangeModal","onUpdateStatus","handleStatusUpdate","ButtonGroup","socket","selectedChatCompare","SingleSheet","messages","setMessages","newMessage","setNewMessage","newItemNum","setNewItemNum","newCategory","setNewCategory","newContent","setNewContent","newLocation","setNewLocation","newEstTime","setNewEstTime","newNotes","setNewNotes","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","showModal","setShowModal","selectedCue","setSelectedCue","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","_ref2","messageId","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","Table","Thead","Tr","Th","alignSelf","margin","flexGrow","Tbody","index","handleCueClick","Td","itemNum","estTime","content","category","notes","onKeyDown","event","key","location","mt","Lottie","options","marginBottom","marginLeft","lastTypingTime","Date","getTime","setTimeout","ok","Error","updatedMessage","updatedMessages","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","sender","length","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Tooltip","label","hasArrow","placement","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","className","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.766aac31.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/sheets\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\"\r\n              size=\"sm\"\r\n              _hover={{ bg: \"gray.500\" }}\r\n              onClick={handleClick}\r\n              bg=\"gray.300\">\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Fields\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/sheets\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\" color=\"white\"> {/* Adjusted text color for dark mode */}\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n          bg=\"gray.700\" // Adjusted background color for dark mode\r\n          color=\"white\" // Adjusted text color for dark mode\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          bg=\"gray.700\" // Adjusted background color for dark mode\r\n          color=\"white\" // Adjusted text color for dark mode\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            bg=\"gray.700\" // Adjusted background color for dark mode\r\n            color=\"white\" // Adjusted text color for dark mode\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\"\r\n              size=\"sm\"\r\n              _hover={{ bg: \"gray.500\" }}\r\n              onClick={handleClick}\r\n              bg=\"gray.600\" >\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n            bg=\"gray.700\" // Adjusted background color for dark mode\r\n            color=\"white\" // Adjusted text color for dark mode\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button\r\n              h=\"1.75rem\"\r\n              size=\"sm\"\r\n              _hover={{ bg: \"gray.500\" }}\r\n              onClick={handleClick}\r\n              bg=\"gray.600\"\r\n            >\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n          bg=\"gray.700\" // Adjusted background color for dark mode\r\n          color=\"white\" // Adjusted text color for dark mode\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/sheets\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"gray.800\" // Adjusted background color for dark mode\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\" color=\"white\"> {/* Adjusted text color for dark mode */}\r\n          Digital Runsheet\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"gray.800\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\"> {/* Adjusted background color for dark mode */}\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab _selected={{ color: \"white\", bg: \"blue.500\" }}> {/* Adjusted tab color for dark mode */}\r\n              Login\r\n            </Tab>\r\n            <Tab _selected={{ color: \"white\", bg: \"blue.500\" }}> {/* Adjusted tab color for dark mode */}\r\n              Sign Up\r\n            </Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Sheet Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to Crew\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Crew\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import React from 'react';\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  ButtonGroup,\r\n} from '@chakra-ui/react';\r\n\r\nconst CueChangeModal = ({ isOpen, onClose, onUpdateStatus }) => {\r\n  const handleStatusUpdate = (status) => {\r\n    onUpdateStatus(status);\r\n    onClose();\r\n  };\r\n\r\n// const handleStatusUpdate = async () => {\r\n//     try {\r\n//         const confi = {\r\n//           headers: {\r\n//             Authorization: `Bearer ${user.token}`,\r\n//           },\r\n//         };\r\n//         const {data} = await axios.put(\r\n//             'api/message/:messageId/status/:status',\r\n//             {\r\n//                 messageId: selectedCue._id,\r\n//                 status: status,\r\n//             },\r\n//             config            \r\n//         )\r\n        \r\n//     } catch (error) {\r\n//         toast({\r\n//             title: \"Error Occured!\",\r\n//             description: \"Failed to set status\",\r\n//             status: \"error\",\r\n//             duration: 5000,\r\n//             isClosable: true,\r\n//             position: \"bottom-left\",\r\n//           });\r\n//     }\r\n//     }   \r\n\r\n\r\n// const onUpdateStatus = async (status) => {\r\n//   const messageId = 'your-message-id'; // Replace with actual message ID\r\n//   const token = 'your-auth-token'; // Replace with actual auth token\r\n\r\n//   try {\r\n//     const response = await fetch(`/api/messages/${messageId}/status/${status}?token=${token}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         // Include other headers as required, such as authorization headers\r\n//       },\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error('Failed to update message status');\r\n//     }\r\n\r\n//     const updatedMessage = await response.json();\r\n//     console.log('Message status updated:', updatedMessage);\r\n//   } catch (error) {\r\n//     console.error('Error updating message status:', error);\r\n//   }\r\n// };\r\n\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>Cue Status</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody>\r\n          <ButtonGroup variant=\"outline\" spacing=\"4\">\r\n            <Button colorScheme=\"red\" onClick={() => handleStatusUpdate('live')}>\r\n              Live\r\n            </Button>\r\n            <Button colorScheme=\"orange\" onClick={() => handleStatusUpdate('standby')}>\r\n              Standby\r\n            </Button>\r\n            <Button colorScheme=\"green\" onClick={() => handleStatusUpdate('completed')}>\r\n              Completed\r\n            </Button>\r\n            <Button colorScheme=\"blue\" onClick={() => handleStatusUpdate('pending')}>\r\n              Pending\r\n            </Button>\r\n          </ButtonGroup>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button onClick={onClose}>Cancel</Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CueChangeModal;\r\n","import { Box, Text, Table, Tbody, Tr, Td, Th, Thead, TableContainer, Spinner, FormControl, Input, IconButton, useToast } from \"@chakra-ui/react\";\r\nimport './styles.css';\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nimport CueChangeModal from \"./miscellaneous/CueChangeModal\";\r\n\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleSheet = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const [newItemNum, setNewItemNum] = useState(\"\");\r\n  const [newCategory, setNewCategory] = useState(\"\");\r\n  const [newContent, setNewContent] = useState(\"\");\r\n  const [newLocation, setNewLocation] = useState(\"\");\r\n  const [newEstTime, setNewEstTime] = useState(\"\");\r\n  const [newNotes, setNewNotes] = useState(\"\");\r\n\r\n\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n  \r\n  const [showModal, setShowModal] = useState(false); // State to control modal visibility\r\n  const [selectedCue, setSelectedCue] = useState(null); // State to store selected cue\r\n  \r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  \r\n  \r\n    const { selectedChat, setSelectedChat, user, notification, setNotification } = ChatState();\r\n\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      \r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n         config\r\n         );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      console.error(\"Error fetching messages:\", error);\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    \r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            itemNum: newItemNum,\r\n            estTime: newEstTime,\r\n            content: newMessage,\r\n            category: newCategory,\r\n            location: newLocation,\r\n            notes: newNotes,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // return () => {\r\n    //   socket.disconnect(); // Clean up socket connection on component unmount\r\n    // };\r\n  }, [/*user*/]);\r\n\r\n  // useEffect(() => {\r\n  //   fetchMessages();\r\n  // }, [selectedChat, fetchAgain]);\r\n\r\n    useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   socket.on(\"message received\", (newMessageReceived) => {\r\n  //     setMessages([...messages, newMessageReceived]);\r\n  //   });\r\n  // });\r\n\r\n    useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  }, [messages]);\r\n  \r\n  \r\n    const typingHandler = (e) => {\r\n      \r\n      setNewMessage(e.target.value);\r\n  \r\n      if (!socketConnected) return;\r\n  \r\n      if (!istyping) {\r\n        setIsTyping(true);\r\n        socket.emit(\"typing\", selectedChat._id);\r\n      }\r\n      let lastTypingTime = new Date().getTime();\r\n      var timerLength = 3000;\r\n      setTimeout(() => {\r\n        var timeNow = new Date().getTime();\r\n        var timeDiff = timeNow - lastTypingTime;\r\n        if (timeDiff >= timerLength && istyping) {\r\n          socket.emit(\"stop typing\", selectedChat._id);\r\n          setIsTyping(false);\r\n        }\r\n      }, timerLength);\r\n    };\r\n  \r\n    \r\n\r\n  \r\n // Inside useEffect hook to handle the socket event\r\nuseEffect(() => {\r\n  socket.on(\"cue status update\", ({ messageId, status }) => {\r\n    // Find the message by ID and update its status\r\n    setMessages(messages.map(message => {\r\n      if (message._id === messageId) {\r\n        return { ...message, status };\r\n      }\r\n      return message;\r\n    }));\r\n  });\r\n}, [messages]); // Make sure to include 'messages' in the dependency array\r\n\r\n\r\nconst handleCueClick = (message) => {\r\n    setSelectedCue(message._id); // Set the selected message ID\r\n    setShowModal(true); // Open the modal\r\n  };\r\n\r\n\r\nconst handleUpdateStatus = async (status) => {\r\n  console.log(\"Updating cue status:\", status);\r\n  console.log(\"Updating message:\", selectedCue);\r\n\r\n  if (!selectedCue) {\r\n    console.error(\"No cue selected\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`/api/message/${selectedCue}/status/${status}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${user.token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to update message status: ${response.status}`);\r\n    }\r\n\r\n    const updatedMessage = await response.json();\r\n    console.log('Message status updated:', updatedMessage); \r\n    \r\n\r\n    // Emit a socket event to notify other clients about the status change\r\n    socket.emit(\"cue status update\", { messageId: selectedCue, status })\r\n    // Emit cue status update event to the server\r\n    // console.log(`Cue status update emitted: Message ID ${messageId}, Status ${status}`);\r\n    console.log(`cue status update emitted: Message ID`, {messageId: selectedCue}, `Status` , {status});\r\n\r\n    \r\n    \r\n\r\n      // Optionally, you can also update the local state immediately for better user experience\r\n      const updatedMessages = messages.map(message => {\r\n        if (message._id === selectedCue) {\r\n          return { ...message, status };\r\n        }\r\n        return message;\r\n      });\r\n      setMessages(updatedMessages);\r\n    } catch (error) {\r\n      console.error('Error updating message status:', error);\r\n    }\r\n\r\n    setSelectedCue(null); // Reset the selected message ID\r\n};\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text fontSize={{ base: \"28px\", md: \"30px\" }} pb={3} px={2} w=\"100%\" fontFamily=\"Work sans\"\r\n            d=\"flex\" justifyContent={{ base: \"space-between\" }} alignItems=\"center\">\r\n            <IconButton d={{ base: \"flex\", md: \"none\" }} icon={<ArrowBackIcon />} onClick={() => setSelectedChat(\"\")} />\r\n            {messages && (!selectedChat.isGroupChat ? (\r\n              <>\r\n                {getSender(user, selectedChat.users)}\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n              </>\r\n            ) : (\r\n              <>Runsheet:  \r\n                {selectedChat.chatName.toUpperCase()}\r\n                <UpdateGroupChatModal fetchMessages={fetchMessages} fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n              </>\r\n            ))}\r\n          </Text>\r\n          <Box d=\"flex\" flexDir=\"column\" justifyContent=\"flex-end\" p={3} bg=\"#E8E8E8\" w=\"100%\" h=\"100%\" borderRadius=\"lg\" overflowY=\"hidden\">\r\n            <Table>\r\n              \r\n                  <Thead>\r\n      <Tr>\r\n        <Th>#</Th>\r\n        <Th>Duration</Th>\r\n        <Th>Action</Th>\r\n        <Th>Category</Th>\r\n        <Th>Notes</Th>\r\n      </Tr>\r\n    </Thead>\r\n            </Table>\r\n            {loading ? (\r\n              <Spinner size=\"xl\" w={20} h={20} alignSelf=\"center\" margin=\"auto\" />\r\n            ) : (\r\n              \r\n              <Box overflowY=\"auto\" flexGrow={1}>\r\n                <Table variant=\"simple\">\r\n                  <Thead>\r\n      <Tr>\r\n        <Th>#</Th>\r\n        <Th>Duration</Th>\r\n        <Th>Action</Th>\r\n        <Th>Category</Th>\r\n        <Th>Notes</Th>\r\n      </Tr>\r\n    </Thead>\r\n                  <Tbody>\r\n                    \r\n                    {/* Render cues as rows */}\r\n                    {messages.map((message, index) => (\r\n                      <Tr key={index} onClick={() => handleCueClick(message)} style={{ cursor: \"pointer\", background: message.status === \"live\" ? \"red\" : (message.status === \"standby\" ? \"orange\" : (message.status === \"completed\" ? \"gray\" : \"white\") ) }}>\r\n                        {/* <Td>{message.sender.name}</Td> */}\r\n                        <Td>{message.itemNum}</Td>\r\n                        <Td>{message.estTime}</Td>\r\n                        <Td>{message.content}</Td>\r\n                        <Td>{message.category}</Td>\r\n                        <Td>{message.notes}</Td>        \r\n                        \r\n                        \r\n                        {/* Add other message attributes as needed */}\r\n                      </Tr>\r\n\r\n                      \r\n                      \r\n                    ))}\r\n                    <Tr>\r\n                      \r\n                    </Tr>\r\n                  </Tbody>\r\n                </Table>\r\n              </Box>\r\n            )}\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input variant=\"filled\" bg=\"#E0E0E0\" placeholder=\"Enter a message..\" value={newMessage} onChange={typingHandler} />\r\n              {/* // Input for updating itemNum */}\r\n              <Input variant=\"filled\" bg=\"#E0E0E0\" placeholder=\"Enter itemNum..\" value={newItemNum} onChange={(e) => setNewItemNum(e.target.value)} />\r\n\r\n              {/* // Input for updating estTime */}\r\n              <Input variant=\"filled\" bg=\"#E0E0E0\" placeholder=\"Enter estTime..\" value={newEstTime} onChange={(e) => setNewEstTime(e.target.value)} />\r\n\r\n              {/* // Input for updating content\r\n              <Input variant=\"filled\" bg=\"#E0E0E0\" placeholder=\"Enter content..\" value={newContent} onChange={(e) => setNewContent(e.target.value)} /> */}\r\n\r\n              {/* // Input for updating category */}\r\n              <Input variant=\"filled\" bg=\"#E0E0E0\" placeholder=\"Enter category..\" value={newCategory} onChange={(e) => setNewCategory(e.target.value)} />\r\n\r\n              {/* // Input for updating location */}\r\n              <Input variant=\"filled\" bg=\"#E0E0E0\" placeholder=\"Enter location..\" value={newLocation} onChange={(e) => setNewLocation(e.target.value)} />\r\n\r\n              {/* // Input for updating notes */}\r\n              <Input variant=\"filled\" bg=\"#E0E0E0\" placeholder=\"Enter notes..\" value={newNotes} onChange={(e) => setNewNotes(e.target.value)} />\r\n\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a sheet to\r\n          </Text>\r\n        </Box>\r\n      )}\r\n      {/* Render CueChangeModal */}\r\n      <CueChangeModal isOpen={showModal} onClose={() => setShowModal(false)} onUpdateStatus={handleUpdateStatus} />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default SingleSheet;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleSheet from \"./SingleSheet\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport SingleChat from './SingleChat'\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleSheet fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Run Sheet Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Runsheet\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Sheet Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Runsheet\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"gray.800\" // Adjusted background color for dark mode\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        color=\"white\"\r\n        bg=\"gray.800\" // Adjusted background color for dark mode\r\n      >\r\n        My Sheets\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n            bg=\"gray.600\" // Adjusted background color for dark mode\r\n          >\r\n            New Runsheet\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"gray.800\" // Adjusted background color for dark mode\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\"\r\n            bg=\"gray.800\" // Adjusted background color for dark mode\r\n          >\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"gray.800\" // Adjusted background color for dark mode\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users add to crew\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            {/* <i className=\"fas fa-search\"></i> */}\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              {/* Search User */}\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text color=\"white\" fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Digital Runsheet\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} color=\"white\"/>\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/sheets\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}